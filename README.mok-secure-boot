MOK Secure Boot
===============

MOK (Machine Owner Key) Secure Boot is based on the industry standard UEFI
Secure Boot, adding the shim loader to chainloader the second-stage bootloader
"SELoader" and eventually chainliader to the third-stage bootloader "grub".

[ Quoting: https://github.com/rhinstaller/shim ]
shim is a trivial EFI application that, when run, attempts to open and
execute another application. It will initially attempt to do this via the
standard EFI LoadImage() and StartImage() calls. If these fail (because secure
boot is enabled and the binary is not signed with an appropriate key, for
instance) it will then validate the binary against a built-in certificate. If
this succeeds and if the binary or signing key are not blacklisted then shim
will relocate and execute the binary.

shim will also install a protocol which permits the second-stage bootloader
to perform similar binary validation. This protocol has a GUID as described
in the shim.h header file and provides a single entry point. On 64-bit systems
this entry point expects to be called with SysV ABI rather than MSABI, and
so calls to it should not be wrapped.
[ End of Quote ]

A complete verification flow with MOK Secure Boot is:

UEFI BIOS boot manager (UEFI Secure Boot enabled) ->
    shim (verified by DB certificate) ->
        SELoader (verified by shim-managed certificates) ->
            grub (verified by shim-managed certificates) ->
                grub.cfg (verified by shim-managed certificates)
                kernel (verified by shim-managed certificates)
                initramfs (verified by shim-managed certificates)

Why using MOK Secure Boot and shim
----------------------------------
In most cases, the hardware coming out of the factory is already provisioned
with a default certificate used to verify the bootloader and issued by
Microsoft Corporation UEFI CA 2011. This kind of hardware is so-called
Microsoft certificated hardware.

Obviously, this requirement needs a bootloader loaded by BIOS must be signed
by Microsoft. Microsoft provides the signing service (not free), but only
accept shim loader for Linux world. Refer to Microsoft's signing policy from
here:
http://blogs.msdn.com/b/windows_hardware_certification/archive/2013/12/03/microsoft-uefi-ca-signing-policy-updates.aspx

Of course, the user can manually remove all default certificates and use
the self-owned keys to provision UEFI Secure Boot, but this is not practical
for ODM/OEM devices because this manual provision is bad for the user
experience. Refer to the section "Out-of-box Experience" in
feature/efi-secure-boot/README for the details.

For a good user experience, shim + SELoader + grub is an excellent combination
to handle Microsoft certificated hardware. With this model, SELoader and grub
are signed by the vendor certificate or MOK certificate without being subject
to the limit from Microsoft's signing policy, and the manual provision is thus
unnecessary.

Build
=====

In order to enable this feature, add the path to
feature/mok-secure-boot/template.conf to conf/local.conf.

Dependency
==========

This feature depends on feature/efi-secure-boot.

Key Management
==============

Refer to README.user-key-store for the initial cognition about key management
for MOK Secure Boot.

Note that the sample key and user key are the concepts in the key signing
model according to the ownership and secrecy. In MOK Secure Boot, the policy
object such as shim certificate, vendor certificate and MOK certificate is
mapped to a key managed by the user key store.

Sample keys
-----------
This template, by default, use the sample keys to sign and verify images for
the purpose of development and demonstration. Please ensure you know what your
risk is to use the sample keys in your product, because they are completely
public.

The sample keys are centrally placed under files/mok_sb_keys/. This template
uses the following key pairs:

  * shim_cert.pem
    The X509 certificate embedded in shim, used to verify the images either
    directly or indirectly loaded by shim.

  * shim_cert.key
    The private key corresponding to shim_cert.pem, used to sign the images
    either directly or indirectly loaded by shim.

  * vendor_cert.pem
    Used in the same way as shim_cert.pem. In addition, vendor certificate
    is the switch to enable shim verification protocol, which facilitates
    the verification for the SELoader.

  * vendor_cert.key
    The private key corresponding to vendor_cert.pem, Same fuction as
    shim_cert.key.

  * vendor_dbx
    This directory contains any number of X509 certificate embedded in shim,
    used to blacklist the revoked certificates.

User Keys
---------
Refer to README.user-key-store for the details about how to generate/use the
keys owned by the user.

Automatic Certificate Provision
-------------------------------
Refer to the section "Automatic Certificate Provision" in
feature/efi-secure-boot/README. MOK Secure Boot is on top of UEFI Secure Boot
so it is still necessary to provision UEFI Secure Boot before using MOK Secure
Boot.

mokutil and MOK Manager
=======================

mokutil is a tool to import or delete the machines owner keys stored in
the database of shim. mokutil creates the requests and MOK manager will be
automatically launched by shim as long as it detects the pending requests.
The physical present user will be prompted to run the operations corresponding
to the requests. Note the operation is required to be authenticated by MOK
management password set by mokutil.

Refer to mokutil man page for the detailed usages. To show mokutil man page,
run the following command:

$ cd $project
$ export MANPATH=tmp/work/core2-64-wrs-linux/mokutil/*/packages-split/mokutil-doc/usr/share:$MANPATH
$ man mokutil

MOK Management Password
-----------------------
MOK management password is the authentication information to allow MOK manager
to grant the request regarding of MOK management. To set the password, run
mokutil with the option --password. In addition, there are 4 input methods to
provide the password. By default, mokutil prompts the user to input the
password and then wraps the password to sha256 password hash. For other 3
methods, refer to the uses of option --hash-file, --root-pw and --simple-hash.

Enroll the MOK certificate
--------------------------
Here is an example showing how to enroll a DER formatted X509 certificate to
the database of shim.

# mokutil --import <cert.cer>

where <cert.cer> is the MOK certificate corresponding to the private key used
to sign either grub or kernel.

To convert a PEM, for exmaple, the shim_cert.pem, to a DER formatted X509
certificate, type the command:
$ openssl x509 -in shim_cert.pem -inform PEM -out shim_cert.cer -outform DER

List the enrollment requests
----------------------------
The several enrollment requests can be submitted before system reboot. Run the
following command to check all enrollment requests.

# mokutil --list-new

Revoke the enrollment requests
------------------------------
Note the revocation operation will remove all enrollment requests.

# mokutil --revoke-import

Test the MOK certificate
------------------------
If you cannot confirm whether a certificate has been enrolled or not, type the
following command for a check:

# mokutil --test-key <cert.cer>

Delete the MOK certificate
--------------------------
Removing an useless MOK certificate is also supported.

# mokutil --delete <cert.cer>

Refer to the options --list-delete and --revoke-delete to list and revoke the
MOKs.

Reset MOK certificates
----------------------
This request will clear all enrolled MOK certificates.

# mokutil --reset

Disable/Enable MOK Secure Boot
------------------------------
MOK Secure Boot can be enabled or disabled regardless of the setting of UEFI
Secure Boot.

# mokutil --disable-validation  // disable MOK Secure Boot
# mokutil --enable-validation   // enable MOK Secure Boot

Note that MOK Secure Boot is based on UEFI Secure Boot. If UEFI Secure Boot
is disabled, MOK Secure Boot will be automatically inactive. Type the
following command to check the status of UEFI Secure Boot.

# mokutil --sb-state

Others
------
Refer to the options --import-hash and --delete-hash to manage hash-based
signature. The options --pk, --kek, --db and --dbx are useful to check
the content of the policy objects used in UEFI Secure Boot.

Manage blacklist
----------------
All above mentioned are talking MOK which is acting as whitelist to
authenticate the verified image to launch. Actually, there is a contrary
policy object called MOKX, acting as blacklist to deny the untrusted
image to launch. Also, MOKX as blacklist is handled by shim prior to MOK
as whitelist.

For the management of blacklist, add the option --mokx with the following
options to change the operation target from MOK to the following options.

--list-enrolled
--test-key
--list-new
--list-delete
--import
--delete
--import-hash
--delete-hash
--reset
--revoke-import
--revoke-delete

Handle MOK Secure Boot Failure with MOK Manager
-----------------------------------------------
If grub or kernel is not signed or signed with an unauthorized certificate,
the shim will prompt the end user a UI called MOK manager to guide the user to
enroll the certificate or hash of the image.

The policy of the selection between digest and certificate for next step is
decided by whether the unauthorized grub or kernel image is signed or not.

If the grub or kernel image is not signed at all, you have to always select
the calculation of the digest based on the file. Note that once grub or kernel
is updated and its digest is changed, you have to relaunch the MOK manager
to enroll the new digests.

If the grub or kernel image is signed by an unauthorized certificate,
enrolling the signing certificate is the preferred way. Copy the certificate
to the boot drive and then select the certificate in MOK manager. Note that the
certificate for the selection must be DER formatted.

If doing so, the unauthorized grub or kernel will be verified successfully
after exiting MOK Manager.

Verification
============

By default, the build system uses DB.key to sign shim, and uses vendor_cert.key
to sign SELoader, grub, grub configuration file, kernel and initramfs image
during the build.

Shim Loader Verification
------------------------
More specifically, UEFI BIOS will validate the integrity of shim before
running it with a certificate in DB. Usually, shim is signed with the
DB.key corresponding to DB.pem.

Either situation will cause the failure of verification.
- shim is not signed.
- shim is signed with DB.key which doesn't correspond to any certificate in
  DB.
- shim is signed with DB.key which corresponds to a certificate in DBX.

Of course, all above conclusions assume UEFI Secure Boot is already enabled.

SELoader Loader Verification
----------------------------
The SELoader is designed to authenticate the non-PE files, such as grub.cfg,
kernel (without EFI stub support) and initrd, which cannot be verified by
the verification protocol registered by the shim loader.

In order to conveniently authenticate the PE file with gBS->LoadImage()
and gBS->StartImage(), the SELoader hooks EFI Security2 Architectural
Protocol and employs verification protocol provided by the shim loader to
verify the PE file. If only UEFI Secure Boot is enabled, the SELoader just
simplily calls gBS->LoadImage() and gBS->StartImage() to allow UEFI BIOS
to verify the PE file.

The SELoader publishes MOK2 verification protocol which provides a flexible
interface to allow the bootloader to verify the file, file buffer or
memory buffer without knowing the file format.

In order to establish the chain of trust, the SELoader is required to be
signed by a private key corresponding to a DB certificate, the shim
certificate, the vendor certificate or a MOK certificate. The specific
key is determined by the secure boot scheme you will use.

Using UEFI Secure Boot, the shim loader and the SELoader together, the
boot process is completely trustworthy.

See more details about the SELoader in its README file.

Bootloader Verification
-----------------------
When the shim loads SELoader and SELoader loads grub, if both UEFI Secure Boot
and MOK Secure Boot are already enabled, the upper bootloader uses a list of
certificate to check the integrity of lower bootloader.

- Blacklist check
  If the lower bootloader is signed with a key corresponding to a certificate
  within any of a policy object below, the boot failure will occur.

  * Vendor DBX
  * DBX
  * MokListX (MOK certificate blacklist)

- Whitelist check
  If the lower bootloader is signed with a key corresponding to a certificate
  within any of a policy object below, the boot success will occur.

  * DB
  * MokList (MOK certificate whitelist)
  * Shim certificate (only for PE image)
  * Vendor certificate

If the lower bootloader is not signed or signed by a key not corresponding to
any policy objects mentioned above, the boot failure will occur.

The benefit of these behaviors allow the end user to regulate the secure boot
even without the ownership of DB on Microsoft certificated hardware.

Grub Configuration File Verification
------------------------------------
Grub can call the MOK2 verification protocol registered by the SELoader
to validate the integrity of grub configuration file before parsing it.

This protection prevents from tampering the grub configuration file from
disabling certains kernel security mechanism such as selinux, IMA and so on.

Kernel Verification
-------------------
When SELoader loads the kernel image with the linux command, if both UEFI
Secure Boot and MOK Secure Boot are already enabled, grub will call the
verification protocol installed by SELoader to validate the kernel image.

Alternately, if grub loads the kernel image with the chainloader command,
if both UEFI Secure Boot and MOK Secure Boot are already enabled, grub will
call the verification protocol installed by shim to validate the kernel image.

By default, the kernel image is signed by vendor certificate and then signed
again to generate the .p7b signature file.

Initramfs Verification
----------------------
When SELoader loads the kernel image with the initrd command, if both UEFI
Secure Boot and MOK Secure Boot are already enabled, grub will call the
verification protocol installed by SELoader to validate the initramfs image.

Work Flow For The First Boot
============================

- Build a project with this template and feature/efi-secure-boot

- Deploy the rootfs

- Boot up the target board

- Enter to BIOS setup and remove the enrolled certificates
  * It is recommended to still turn on UEFI Secure Boot option if allowed.

- Launch a reboot via ctrl + alt + del
  * Otherwise, a misleading error message about the verification failure
  will be displayed.

- Automatically boot to "Automatic Certificate Provision"

- (Optional) Enter into BIOS setup to turn on UEFI Secure Boot option

- Boot to the system with the protection provided by UEFI Secure Boot and
  MOK Secure Boot

Known Issues
============

- The 32-bit MOK Secure Boot is not validated. In other words, loading 32-bit
shim, MOK manager, grub and kernel is not supported.
